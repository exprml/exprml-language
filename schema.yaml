"$schema": "http://json-schema.org/draft-07/schema#"
title: ExprML Schema
description: |
  ExprML is a YAML-based expression evaluator framework.
  This schema defines the structure of the ExprML language.

"$ref": "#/definitions/Expr"

definitions:

  Expr:
    description: |
      An expression is a JSON value that represents a computation.
      It can be a scalar value, an object, an array, a function call, etc.
    anyOf:
      - "$ref": "#/definitions/Eval"
      - "$ref": "#/definitions/Scalar"
      - "$ref": "#/definitions/Obj"
      - "$ref": "#/definitions/Arr"
      - "$ref": "#/definitions/Json"
      - "$ref": "#/definitions/RangeIter"
      - "$ref": "#/definitions/GetElem"
      - "$ref": "#/definitions/FunCall"
      - "$ref": "#/definitions/Cases"
      - "$ref": "#/definitions/OpUnary"
      - "$ref": "#/definitions/OpBinary"
      - "$ref": "#/definitions/OpVariadic"

  Eval:
    description: |
      `Eval` block is a JSON object that represents an expression to evaluate be accompanied by function definitions.
    examples:
      - eval:
          ref: hello_function
          with:
            name: { ref: name_variable }
        where:
          - def: name_variable
            value: ExprML
          - def: hello_function
            with: [ name ]
            value:
              cat: [ "Hello, ", ref: name, "!" ]
    type: object
    properties:
      where:
        description: |
          `where` property is a list of function definitions that can be referenced by the `eval` property.
        type: array
        items:
          "$ref": "#/definitions/Eval/definitions/FunDef"
      eval:
        description: |
          `eval` property is a expression to evaluate, which can reference the functions in the `where` property.
        "$ref": "#/definitions/Expr"
    required: [ eval ]
    additionalProperties: false
    definitions:
      FunDef:
        description: |
          `FunDef` block is a function definition.
          `with` property may be absent to define a constant function, which can be regarded as a so-called variable definition.
        type: object
        properties:
          def:
            description: |
              `def` property defines the name of the function.
            type: string
          value:
            description: |
              `value` property defines the body of the function.
            "$ref": "#/definitions/Expr"
          with:
            description: |
              `with` property defines the list of parameter names, which may be absent.
            type: array
            items:
              type: string
        required: [ def, value ]
        additionalProperties: false

  Scalar:
    description: |
      `Scalar` literal represents a scalar value which is a number, a boolean, or a string.
    examples:
      - 42
      - true
      - "Hello, World!"
    oneOf:
      - type: number
      - type: boolean
      - type: string

  Obj:
    description: |
      `Obj` block constructs a JSON object.
    examples:
      - obj:
          key: value
    type: object
    properties:
      obj:
        description: |
          `obj` property takes a JSON object which maps string keys to expressions.
        type: object
        additionalProperties:
          "$ref": "#/definitions/Expr"
    required: [ obj ]
    additionalProperties: false

  Arr:
    description: |
      `Arr` block constructs a JSON array.
    examples:
      - arr: [ 1, 2, 3 ]
    type: object
    properties:
      arr:
        description: |
          `arr` property takes a JSON array which arranges expressions sequentially.
        type: array
        items:
          "$ref": "#/definitions/Expr"
    required: [ arr ]
    additionalProperties: false

  Json:
    description: |
      `Json` block constructs a JSON value as is.
    examples:
      - json: { }
      - json: [ ]
      - json: 42
    type: object
    properties:
      json:
        description: |
          `json` property takes a JSON value excluding null.
        "$ref": "#/definitions/Json/definitions/NonNull"
    required: [ json ]
    additionalProperties: false
    definitions:
      NonNull:
        description: |
          `NonNull` represents a JOSN value excluding null.
        oneOf:
          - type: number
          - type: boolean
          - type: string
          - type: object
            additionalProperties:
              "$ref": "#/definitions/Json/definitions/NonNull"
          - type: array
            items:
              "$ref": "#/definitions/Json/definitions/NonNull"

  RangeIter:
    description: |
      `RangeIter` block constructs a new collection by iterating over the given collection.
      A collection is a JSON value that is one of a string, an array, or an object.
      For a string, the iteration is over its characters and constructs a JSON array.
      For an array, the iteration is over its elements and constructs a JSON array.
      For an object, the iteration is over its key-value pairs and constructs a JSON object.
    examples:
      - for: [ i, c ]
        in: "Hello, World!"
        do: { ref: i }
        if: { neq: [ ref: c, " " ] }
      - for: [ i, e ]
        in: [ 1, 2, 3, 4, 5 ]
        do: { mul: [ ref: e, 2 ] }
        if: { gt: [ ref: i, 2 ] }
      - for: [ k, v ]
        in: { a: 1, b: 2, c: 3 }
        do: { mul: [ ref: e, 2 ] }
        if: { neq: [ ref: k, "b" ] }
    type: object
    properties:
      for:
        description: |
          `for` property defines the names of two variables which can be referenced in `do` and `if` property.
          For a string, the first variable references the index of a character in the string and the second variable references the character.
          For an array, the first variable references the index of an element in the array and the second variable references the element.
          For an object, the first variable references the key of a value in the object and the second variable references the value.
        type: array
        items:
          type: string
        minItems: 2
        maxItems: 2
      in:
        description: |
          `in` property takes a collection.
          If the given value is evaluated as not a collection, the evaluation fails.
        "$ref": "#/definitions/Expr"
      do:
        description: |
          `do` property defines the expression to evaluate at each iteration.
        "$ref": "#/definitions/Expr"
      if:
        description: |
          `if` property determines whether to evaluate the `do` property.
          If the given value is evaluated as not a boolean, the evaluation fails.
          `do` property is evaluated if this property is absent or it is true for the corresponding element.
          Otherwise, the `do` property is skipped. 
        "$ref": "#/definitions/Expr"
    required: [ for, in, do ]
    additionalProperties: false

  GetElem:
    description: |
      `GetElem` block extracts an element at the specified position from a collection.
    examples:
      - get: 4
        from: "Hello, World!"
      - get: 1
        from: [ 1, 2, 3 ]
      - get: "c"
        from: { a: 1, b: 2, c: 3 }
    type: object
    properties:
      get:
        description: |
          `get` property takes a position at a collection.
          For a string, if the position is not an integer number index, the evaluation fails.
          For an array, if the position is not an integer number index, the evaluation fails.
          For an object, if the position is not a string key, the evaluation fails.
          If the position is not found in the collection, the evaluation fails.
        "$ref": "#/definitions/Expr"
      from:
        description: |
          `from` property takes a collection.
          If the given value is evaluated as not a collection, the evaluation fails.
        "$ref": "#/definitions/Expr"
    required: [ get, from ]
    additionalProperties: false

  FunCall:
    description: |
      `FunCall` block invokes a function with the specified arguments.
      Calling a function without arguments is allowed, which can be regarded as a so-called variable reference.
    examples:
      - ref: hello_function
        with:
          name: { ref: name_variable }
      - ref: name_variable
    type: object
    properties:
      ref:
        description: |
          `ref` property takes a name of the function to be called.
          If the name is not found in the existing references, the evaluation fails.
        type: string
      with:
        description: |
          `with` property takes a JSON object which maps argument names to argument values.
          This property may be absent if the function defines no arguments.
          If arguments does not match the function definition, the evaluation fails.
        type: object
        additionalProperties:
          "$ref": "#/definitions/Expr"
    required: [ ref ]
    additionalProperties: false

  Cases:
    description: |
      `Cases` block selects one of the branches based on the conditions.
    examples:
      - cases:
          - when: { gt: [ ref: x, 0 ] }
            then: "Positive"
          - when: { lt: [ ref: x, 0 ] }
            then: "Negative"
          - otherwise: "Zero"
    type: object
    properties:
      cases:
        description: |
          `cases` property is a list of conditional cases.
          Conditions are evaluated from the top, and the first case that has `when` property which evaluates `true` or has 'otherwise' property is selected.
          If no case is selected, the evaluation fails.
        type: array
        items:
          oneOf:
            - "$ref": "#/definitions/Cases/definitions/CasesWhenThen"
            - "$ref": "#/definitions/Cases/definitions/CasesOtherwise"
    required: [ cases ]
    additionalProperties: false
    definitions:
      CasesWhenThen:
        description: |
          `CasesWhenThen` block is a conditional case consists of `when` and `then` properties.
        type: object
        properties:
          when:
            description: |
              `when` property is a condition to evaluate.
              If this expression evaluates to not a boolean value, the evaluation fails.
            "$ref": "#/definitions/Expr"
          then:
            description: |
              `then` property is an expression to evaluate if this case is selected.
            "$ref": "#/definitions/Expr"
        required: [ when, then ]
        additionalProperties: false
      CasesOtherwise:
        description: |
          `CasesOtherwise` block is a default case consists of `otherwise` property.
        type: object
        properties:
          otherwise:
            description: |
              `otherwise` property is an expression to evaluate if this case is selected.
            "$ref": "#/definitions/Expr"
        required: [ otherwise ]
        additionalProperties: false

  OpUnary:
    description: |
      `OpUnary` block applies an builtin operation with one operand.
    type: object
    minProperties: 1
    maxProperties: 1
    additionalProperties: false
    properties:
      len:
        description: |
          `len` operation returns the length of the operand.
          For a string, it returns the number of characters.
          For an array, it returns the number of elements.
          For an object, it returns the number of key-value pairs.
          If the operand has no length, the evaluation fails.
        examples:
          - len: "Hello, World!"
          - len: [ 1, 2, 3 ]
          - len: { a: 1, b: 2, c: 3 }
        "$ref": "#/definitions/Expr"
      not:
        description: |
          `not` operation returns the negation of the operand.
          If the operand evaluates to not a boolean value, the evaluation fails.
        examples:
          - not: true
          - not: false
        "$ref": "#/definitions/Expr"
      flat:
        description: |
          `flat` operation returns the flattened JSON array of the operand.
          If the operand is not evaluated as an array of arrays, the evaluation fails.
        examples:
          - flat: [ [ 1, 2 ], [ 3, 4 ] ]
        "$ref": "#/definitions/Expr"
      floor:
        description: |
          `floor` operation returns the maximum integer value that is less than or equal to the operand.
          If the operand is not evaluated as a number, the evaluation fails.
        examples:
          - floor: 3.14
          - floor: 3.0
        "$ref": "#/definitions/Expr"
      ceil:
        description: |
          `ceil` operation returns the minimum integer value that is greater than or equal to the operand.
          If the operand is not evaluated as a number, the evaluation fails.
        examples:
          - ceil: 3.14
          - ceil: 3.0
        "$ref": "#/definitions/Expr"
      abort:
        description: |
          `abort` operation always fails the evaluation.
          If the operand evaluates to not a string, the evaluation fails.
        examples:
          - abort: "invalid state"
        "$ref": "#/definitions/Expr"

  OpBinary:
    description: |
      `OpBinary` block applies an builtin operation with two operands.
    type: object
    minProperties: 1
    maxProperties: 1
    additionalProperties: false
    properties:
      sub:
        description: |
          `sub` operation returns the subtraction of the two operands.
          If the operands are not evaluated as numbers, the evaluation fails.
          If the result is to be not a finite number, the evaluation fails.
        examples:
          - sub: [ 3, 2 ]
        "$ref": "#/definitions/OpBinary/definitions/OpBinaryOperand"
      div:
        description: |
          `div` operation returns the division of the two operands.
          If the operands are not evaluated as numbers, the evaluation fails.
          If the result is to be not a finite number, the evaluation fails.
        examples:
          - div: [ 3, 2 ]
        "$ref": "#/definitions/OpBinary/definitions/OpBinaryOperand"
      eq:
        description: |
          `eq` operation returns the equality of the two operands.
        examples:
          - eq: [ 5, 5 ]
          - eq: [ "Hello", "World" ]
        "$ref": "#/definitions/OpBinary/definitions/OpBinaryOperand"
      neq:
        description: |
          `neq` operation returns the inequality of the two operands.
        examples:
          - neq: [ 5, 5 ]
          - neq: [ "Hello", "World" ]
        "$ref": "#/definitions/OpBinary/definitions/OpBinaryOperand"
      lt:
        description: |
          `lt` operation returns the less-than comparison of the two operands.
          If the operands are not evaluated as comparable JSON values, the evaluation fails, where comparable JSON values are numbers, booleans, strings, or arrays of comparable values.
          If the operands have different types, the evaluation fails.
        examples:
          - lt: [ 5, 5 ]
          - lt: [ "xyz", "abc" ]
          - lt: [ [ 1, 2 ], [ 1, 2, 3 ] ]
        "$ref": "#/definitions/OpBinary/definitions/OpBinaryOperand"
      lte:
        description: |
          `lte` operation returns the less-than-or-equal comparison of the two operands.
          This behaves like the `lt` operation, but it also returns `true` if the two operands are equal.
        examples:
          - lte: [ 5, 5 ]
          - lte: [ "xyz", "abc" ]
          - lte: [ [ 1, 2 ], [ 1, 2, 3 ] ]
        "$ref": "#/definitions/OpBinary/definitions/OpBinaryOperand"
      gt:
        description: |
          `gt` operation returns the greater-than comparison of the two operands.
          This behaves like the `lte` operation, but it returns negation of the `lte` operation.
        examples:
          - gt: [ 5, 5 ]
          - gt: [ "xyz", "abc" ]
          - gt: [ [ 1, 2 ], [ 1, 2, 3 ] ]
        "$ref": "#/definitions/OpBinary/definitions/OpBinaryOperand"
      gte:
        description: |
          `gte` operation returns the greater-than-or-equal comparison of the two operands.
          This behaves like the `lt` operation, but it returns negation of the `lt` operation.
        examples:
          - gte: [ 5, 5 ]
          - gte: [ "xyz", "abc" ]
          - gte: [ [ 1, 2 ], [ 1, 2, 3 ] ]
        "$ref": "#/definitions/OpBinary/definitions/OpBinaryOperand"
    definitions:
      OpBinaryOperand:
        type: array
        items:
          "$ref": "#/definitions/Expr"
        minItems: 2
        maxItems: 2

  OpVariadic:
    description: |
      `OpVariadic` block applies an builtin operation with variadic operands.
    type: object
    minProperties: 1
    maxProperties: 1
    additionalProperties: false
    properties:
      add:
        description: |
          `add` operation returns the sum of the operands.
          If operands are empty, the result is 0.
          If the operands are not evaluated as numbers, the evaluation fails.
          If the result is to be not a finite number, the evaluation fails.
        examples:
          - add: [ 1, 2, 3 ]
          - add: [ ]
        type: array
        items:
          "$ref": "#/definitions/Expr"
      mul:
        description: |
          `mul` operation returns the product of the operands.
          If operands are empty, the result is 1.
          If the operands are not evaluated as numbers, the evaluation fails.
          If the result is to be not a finite number, the evaluation fails.
        examples:
          - mul: [ 1, 2, 3 ]
          - mul: [ ]
        type: array
        items:
          "$ref": "#/definitions/Expr"
      and:
        description: |
          `and` operation returns the logical AND of the operands.
          If operands are empty, the result is true.
          If the operands are not evaluated as booleans, the evaluation fails.
        examples:
          - and: [ ]
          - and: [ true ]
          - and: [ false ]
          - and: [ true, false ]
          - and: [ true, true, true ]
        type: array
        items:
          "$ref": "#/definitions/Expr"
      or:
        description: |
          `or` operation returns the logical OR of the operands.
          If operands are empty, the result is false.
          If the operands are not evaluated as booleans, the evaluation fails.
        examples:
          - or: [ ]
          - or: [ true ]
          - or: [ false ]
          - or: [ true, false ]
          - or: [ false, false, false ]
        type: array
        items:
          "$ref": "#/definitions/Expr"
      cat:
        description: |
          `cat` operation returns the concatenation of the operands.
          If operands are empty, the result is an empty string.
          If the operands are not evaluated as strings, the evaluation fails.
        examples:
          - cat: [ ]
          - cat: [ "Hello, ", "World", "!" ]
        type: array
        items:
          "$ref": "#/definitions/Expr"
      min:
        description: |
          `min` operation returns the minimum value of the one or more operands.
          If operands are not evaluated as numbers, the evaluation fails.
        examples:
          - min: [ 3, 1, 4, 2 ]
          - min: [ 100 ]
        type: array
        items:
          "$ref": "#/definitions/Expr"
        minItems: 1
      max:
        description: |
          `max` operation returns the maximum value of the one or more operands.
          If operands are not evaluated as numbers, the evaluation fails.
        examples:
          - max: [ 3, 1, 4, 2 ]
          - max: [ 100 ]
        type: array
        items:
          "$ref": "#/definitions/Expr"
        minItems: 1
      merge:
        description: |
          `merge` operation returns the merged JSON object of the operands.
          If operands are empty, the result is an empty object.
          If the operands are not evaluated as JSON objects, the evaluation fails.
        examples:
          - merge: [ ]
          - merge: [ { a: 1, b: 1 }, { b: 2 }, { c: 3 } ]
          - merge: [ { a: 1 }, { a: 2 }, {} ]
        type: array
        items:
          "$ref": "#/definitions/Expr"
